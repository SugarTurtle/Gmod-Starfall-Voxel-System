--@name StarVoxels Voxel Test
--@author Elias & SugarCube
--This test chip aims to create voxels, along with many different optimzations to create a functional system before constructing the final version.
    --4100 entries is the soft limit for players on default settings. While higher is possible, it's not consistent 
    --4850 entries is the soft limit for servers on default settings.
--Notes ^    
    --store voxels in a static/entities system
    --add queue system
    --material and hardness(maybe) based on color
    --add shape generators and seperate draw commands
--Misc stuff ^
    --every voxel is seperate, needs to be mesh combined ASAP    
--Problems and bugs ^
local UPS=15
local next_frame=0
local fps_delta=1/UPS 

if SERVER then
    local scale=5
    local static={
        [1]={
            xyz=Vector(0,0,0),
            rgb=Color(255,255,255),
        },
        [2]={
            xyz=Vector(2,0,0),
            rgb=Color(255,255,255),
        }
    }
    local entities={}
    
    function voxel(vector)
        local vector=vector*scale
        
        local convexes={{
            Vector(1,1,1)*scale,Vector(1,1,-1)*scale,Vector(-1,1,-1)*scale,Vector(-1,1,1)*scale,
            Vector(1,-1,1)*scale,Vector(1,-1,-1)*scale,Vector(-1,-1,-1)*scale,Vector(-1,-1,1)*scale,}} 
        return convexes --may need localization for rotation in future (worldtolocal)
    end
    for k,v in ipairs(static)do
        local xyz=static[k]["xyz"]
        local rgb=static[k]["rgb"]
        
        b=prop.createCustom(chip():getPos()+xyz*scale,Angle(),voxel(xyz),true)
        b:setColor(rgb)
        static[k]["entity"]=b
    end
    chip():setColor(Color(0,0,0,0))
    function cl_send(id,data,ply)
        net.start(id)
        net.writeTable(data)
        net.send(ply)
    end
    hook.add("ClientInitialized","",function(ply)
        cl_send("cl_initStatic",static,ply)
        cl_cursor=prop.createCustom(chip():getPos()-Vector(0,0,100),Angle(),voxel(Vector(0,0,0)),true)
        local cursorID=cl_cursor:entIndex()
        
        hook.add("think",owner():getName(),function() --Owner only for now
            local now=timer.systime()
            --aimTrace.Entity:entIndex()
            
            if next_frame<now then 
                local aimTrace=owner():getEyeTrace()
                local entID=aimTrace.Entity:entIndex()
                
                next_frame=now+fps_delta
                net.receive("Key15",function()
                    if net.readBool()==false then
                        cl_cursor:setPos(chip():getPos()-Vector(0,0,100))
                        return
                    end
                    if entID!=cursorID and entID!=0 then --Add check for max rotation
                        cl_cursor:setPos(aimTrace.Entity:getPos()+aimTrace.HitNormal*scale*2)
                        cl_cursor:setAngles(aimTrace.Entity:getAngles())
                    end
                end)
            end
        end)
    end)
    --[[
    find.allPlayers(function(ply)
        cl_send("cl_initStatic",static,ply)
    end)
    ]]
else
    local cl_static={}
    
    local default=material.create("UnlitGeneric")
    default:setInt("$flags",0)
    
    net.receive("cl_initStatic",function()
        cl_static=net.readTable()
        for k,v in ipairs(cl_static)do
            --cl_static[k]["entity"]:setMeshMaterial(default)
        end
    end)
    hook.add("think","",function()
        local now=timer.systime()
        
        if next_frame<now then
            net.start("Key15")
            net.writeBool(input.isKeyDown(15)and!input.isMouseDown(107))
            net.send()
        end
    end)
    --[[
    net.receive("cl_cursor",function()
        cl_cursor=net.readEntity()
    end)
    ]]
end